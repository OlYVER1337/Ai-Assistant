import { auth } from '../config/firebase';
import axios from 'axios';
import axiosRetry from 'axios-retry';

axiosRetry(axios, { retries: 3, retryDelay: axiosRetry.exponentialDelay });

// C·∫≠p nh·∫≠t apiService.js
typeof window !== "undefined" && console.log("üî• API Service Loaded");
const API_URL = "http://127.0.0.1:5000";

async function getAuthToken() {
  try {
    const token = await auth.currentUser?.getIdToken(true);
    return token;
  } catch (error) {
    console.error("L·ªói l·∫•y token Firebase:", error);
    return null;
  }
}


async function apiRequest(endpoint, method, body) {
  const token = await getAuthToken();
  if (!token) return { error: "Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng!" };

  try {
    const response = await axios({
      url: `${API_URL}${endpoint}`,
      method,
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      },
      data: body
    });
    return response.data;
  } catch (error) {
    if (error.response) {
      return { error: error.response.data.error || `L·ªói server: ${error.response.status}` };
    }
    return { error: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server!" };
  }
}

export async function askQuestion(question, isTeaching = false, teachResponse = '') {
  try {
    console.log("üî• G·ª≠i c√¢u h·ªèi:", question, "isTeaching:", isTeaching);
    const response = await apiRequest('/ask', 'POST', { 
      question, 
      is_teaching: isTeaching, 
      teach_response: teachResponse 
    });
    console.log("üî• API Response =", response);

    if (!response || !response.answer) {
      return { response: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ server.", status: "error" };
    }
    return { response: response.answer, status: response.status || "success", query: response.query };
  } catch (error) {
    console.error("‚ùå API Error:", error);
    return { response: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. H√£y th·ª≠ l·∫°i sau.", status: "error" };
  }
}

export async function greetUser() {
  const response = await apiRequest('/greet', 'POST', {});
  if (response.error === "missing_username") {
    const username = prompt("Nh·∫≠p t√™n c·ªßa b·∫°n:");
    if (!username) return { response: "B·∫°n c·∫ßn nh·∫≠p t√™n ƒë·ªÉ ti·∫øp t·ª•c!", status: "error" };
    return await apiRequest('/greet', 'POST', { username });
  }
  if (response.error === "missing_location") {
    const location = prompt("Nh·∫≠p v·ªã tr√≠ c·ªßa b·∫°n:");
    if (!location) return { response: "B·∫°n c·∫ßn nh·∫≠p v·ªã tr√≠ ƒë·ªÉ ti·∫øp t·ª•c!", status: "error" };
    return await apiRequest('/greet', 'POST', { username: response.username, location });
  }
  return response;
}

export async function logout() {
  const response = await apiRequest('/logout', 'POST', {});
  return response;
}

export async function teachAI(originalQuery, teachResponse) {
  try {
    console.log("üî• G·ª≠i d·∫°y AI:", originalQuery, teachResponse);
    const response = await apiRequest('/teach', 'POST', { 
      original_query: originalQuery, 
      teach_response: teachResponse 
    });
    console.log("üî• Teach API Response =", response);
    if (!response || response.error) {
      return { response: response.error || "Kh√¥ng th·ªÉ d·∫°y AI.", status: "error" };
    }
    return { response: response.answer, status: "success" };
  } catch (error) {
    console.error("‚ùå Teach API Error:", error);
    return { response: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. H√£y th·ª≠ l·∫°i sau.", status: "error" };
  }
}

export async function sendFeedback(originalQuery, feedback) {
  try {
    console.log("üî• G·ª≠i feedback:", originalQuery, feedback);
    const response = await apiRequest('/feedback', 'POST', { 
      original_query: originalQuery, 
      feedback: feedback 
    });
    console.log("üî• Feedback API Response =", response);
    if (!response || response.error) {
      return { response: response.error || "Kh√¥ng th·ªÉ g·ª≠i feedback.", status: "error" };
    }
    return { response: response.answer, status: "success" };
  } catch (error) {
    console.error("‚ùå Feedback API Error:", error);
    return { response: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. H√£y th·ª≠ l·∫°i sau.", status: "error" };
  }
}

